import { objectType as d } from "../_util/type.mjs";
import { shallowRef as u, defineComponent as p, computed as n, provide as v, watch as c, unref as a, triggerRef as m, inject as f } from "vue";
const i = Symbol("XProviderContext"), t = u(), P = (e) => {
  v(i, e), c(
    e,
    () => {
      t.value = a(e), m(t);
    },
    { immediate: !0, deep: !0 }
  );
}, X = () => f(
  i,
  n(() => t.value || {})
), l = p({
  props: {
    value: d()
  },
  setup(e, { slots: r }) {
    return P(n(() => e.value)), () => {
      var o;
      return (o = r.default) == null ? void 0 : o.call(r);
    };
  }
});
export {
  l as XProviderContextProvider,
  l as default,
  t as globalXProviderApi,
  X as useXProviderContextInject,
  P as useXProviderContextProvider
};
