const u = typeof CSSINJS_STATISTIC < "u";
let i = !0;
function l(...r) {
  if (!u)
    return Object.assign({}, ...r);
  i = !1;
  const e = {};
  return r.forEach((n) => {
    if (typeof n != "object")
      return;
    Object.keys(n).forEach((t) => {
      Object.defineProperty(e, t, {
        configurable: !0,
        enumerable: !0,
        get: () => n[t]
      });
    });
  }), i = !0, e;
}
const f = {}, d = {};
function a() {
}
const y = (r) => {
  let e, n = r, c = a;
  return u && typeof Proxy < "u" && (e = /* @__PURE__ */ new Set(), n = new Proxy(r, {
    get(t, o) {
      return i && (e == null || e.add(o)), t[o];
    }
  }), c = (t, o) => {
    var s;
    f[t] = {
      global: Array.from(e),
      component: {
        ...(s = f[t]) == null ? void 0 : s.component,
        ...o
      }
    };
  }), { token: n, keys: e, flush: c };
};
export {
  d as _statistic_build_,
  y as default,
  l as merge,
  f as statistic
};
