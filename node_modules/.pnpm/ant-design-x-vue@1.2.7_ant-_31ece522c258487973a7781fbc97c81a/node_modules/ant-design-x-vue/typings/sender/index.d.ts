export type { SenderProps } from './interface';
declare const Sender: {
    new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("./interface").SenderProps> & Readonly<{
        "onUpdate:value"?: (value: string) => any;
    }>, {
        nativeElement: HTMLDivElement;
        focus: (opt: any) => any;
        blur: () => any;
    }, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
        "update:value": (value: string) => any;
    }, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<import("./interface").SenderProps> & Readonly<{
        "onUpdate:value"?: (value: string) => any;
    }>, {
        nativeElement: HTMLDivElement;
        focus: (opt: any) => any;
        blur: () => any;
    }, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import("vue").ComponentOptionsBase<Readonly<import("./interface").SenderProps> & Readonly<{
    "onUpdate:value"?: (value: string) => any;
}>, {
    nativeElement: HTMLDivElement;
    focus: (opt: any) => any;
    blur: () => any;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:value": (value: string) => any;
}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
    $slots: Readonly<{
        header?(): import("vue").VNode;
        prefix?(): import("vue").VNode;
        actions?(props: {
            ori: import("vue").VNode;
            info: {
                components: {
                    SendButton: typeof import("./components/SendButton.vue").default;
                    ClearButton: typeof import("./components/ClearButton.vue").default;
                    LoadingButton: typeof import("./components/LoadingButton.vue").default;
                    SpeechButton: typeof import("./components/SpeechButton/index.vue").default;
                };
            };
        }): import("vue").VNode;
        footer?(props: {
            info: {
                components: {
                    SendButton: typeof import("./components/SendButton.vue").default;
                    ClearButton: typeof import("./components/ClearButton.vue").default;
                    LoadingButton: typeof import("./components/LoadingButton.vue").default;
                    SpeechButton: typeof import("./components/SpeechButton/index.vue").default;
                };
            };
        }): import("vue").VNode;
    }> & {
        header?(): import("vue").VNode;
        prefix?(): import("vue").VNode;
        actions?(props: {
            ori: import("vue").VNode;
            info: {
                components: {
                    SendButton: typeof import("./components/SendButton.vue").default;
                    ClearButton: typeof import("./components/ClearButton.vue").default;
                    LoadingButton: typeof import("./components/LoadingButton.vue").default;
                    SpeechButton: typeof import("./components/SpeechButton/index.vue").default;
                };
            };
        }): import("vue").VNode;
        footer?(props: {
            info: {
                components: {
                    SendButton: typeof import("./components/SendButton.vue").default;
                    ClearButton: typeof import("./components/ClearButton.vue").default;
                    LoadingButton: typeof import("./components/LoadingButton.vue").default;
                    SpeechButton: typeof import("./components/SpeechButton/index.vue").default;
                };
            };
        }): import("vue").VNode;
    };
}) & {
    Header: {
        new (...args: any[]): import("vue").CreateComponentPublicInstanceWithMixins<Readonly<import("./interface").SenderHeaderProps> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, import("vue").PublicProps, {}, true, {}, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, {}, any, import("vue").ComponentProvideOptions, {
            P: {};
            B: {};
            D: {};
            C: {};
            M: {};
            Defaults: {};
        }, Readonly<import("./interface").SenderHeaderProps> & Readonly<{}>, {}, {}, {}, {}, {}>;
        __isFragment?: never;
        __isTeleport?: never;
        __isSuspense?: never;
    } & import("vue").ComponentOptionsBase<Readonly<import("./interface").SenderHeaderProps> & Readonly<{}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, {}, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & (new () => {
        $slots: Readonly<{
            default(props?: any): any;
        }> & {
            default(props?: any): any;
        };
    });
};
export default Sender;
export { Sender, };
