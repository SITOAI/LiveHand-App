import type { BubbleContentType, BubbleProps } from './interface';
import type { VNode } from 'vue';
declare const _default: <T extends BubbleContentType = string>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{} & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, never>, never> & Partial<{}> & BubbleProps<T>> & import("vue").PublicProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        nativeElement: import("vue").Ref<HTMLDivElement, HTMLDivElement>;
    }>): void;
    attrs: any;
    slots: Readonly<{
        avatar?(): VNode;
        header?(props: {
            content: BubbleContentType;
        }): VNode | string;
        footer?(props: {
            content: BubbleContentType;
        }): VNode | string;
        loading?(): VNode;
        message?(props: {
            content: BubbleContentType;
        }): VNode | string;
    }> & {
        avatar?(): VNode;
        header?(props: {
            content: BubbleContentType;
        }): VNode | string;
        footer?(props: {
            content: BubbleContentType;
        }): VNode | string;
        loading?(): VNode;
        message?(props: {
            content: BubbleContentType;
        }): VNode | string;
    };
    emit: {};
}>) => import("vue").VNode & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
